---
title: "Regresión — PM2.5 (Ecuador)"
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true
    fig-align: center
    embed-resources: true
execute:
  echo: true
  warning: false
  error: true   # ponlo true mientras probamos; luego puedes volver a false
---
## Análisis de calidad del aire (PM2.5) en Ecuador con foco en Quito. 

## 1) Cargar y explorar

```{python}
import pandas as pd
import numpy as np

# Ruta al dataset limpio que generamos antes
df = pd.read_csv("data/pm25_ecuador_clean.csv")

print("Shape:", df.shape)
display(df.head(8))

# Nos quedamos SOLO con columnas numéricas (la consigna pide evitar categóricas)
num = df.select_dtypes(include=[np.number]).copy()
print("Numéricas:", list(num.columns))
display(num.describe().T)


## 2) Seleccionar variables (X, y) y train/test split
from sklearn.model_selection import train_test_split

# Elegir la y:
# Si existe una columna 'pm25', la usamos. Si no existe, tomamos la última columna numérica como fallback.
target_name = "pm25" if "pm25" in num.columns else num.columns[-1]

y = num[target_name].values
X = num.drop(columns=[target_name]).values

print("Objetivo (y):", target_name)
print("X shape:", X.shape, "| y shape:", y.shape)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42
)


## 3) Pipeline + LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression

pipe = Pipeline([
    ("scaler", StandardScaler()),  # en regresión lineal no siempre es obligatorio, pero es buena práctica
    ("linreg", LinearRegression())
])

pipe.fit(X_train, y_train)
y_pred = pipe.predict(X_test)


## 4) Métricas (MSE y R²)

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
r2  = r2_score(y_test, y_pred)

print(f"MSE : {mse:,.4f}")
print(f"R²  : {r2:,.4f}")


## 5) Visualización — Real vs Predicho

import matplotlib.pyplot as plt

plt.figure()
plt.scatter(y_test, y_pred, alpha=0.4)
plt.xlabel("Real")
plt.ylabel("Predicho")
plt.title("PM2.5 — Real vs Predicho")
minv = float(np.min([y_test.min(), y_pred.min()]))
maxv = float(np.max([y_test.max(), y_pred.max()]))
plt.plot([minv, maxv], [minv, maxv])  # línea y=x
plt.tight_layout()
plt.show()


## 6) Curva de aprendizaje (opcional recomendado)
from sklearn.model_selection import learning_curve

train_sizes, train_scores, valid_scores = learning_curve(
    pipe, X, y, cv=5, scoring="r2", n_jobs=None,
    train_sizes=np.linspace(0.1, 1.0, 6), shuffle=True, random_state=42
)

train_mean = train_scores.mean(axis=1)
valid_mean = valid_scores.mean(axis=1)

plt.figure()
plt.plot(train_sizes, train_mean, marker="o", label="Train R²")
plt.plot(train_sizes, valid_mean, marker="s", label="Valid R²")
plt.xlabel("Tamaño de entrenamiento")
plt.ylabel("R²")
plt.title("Curva de aprendizaje")
plt.legend()
plt.tight_layout()
plt.show()

```

## Conclusiones — Regresión (PM2.5 Quito)

```{python}
# --- Asegurar que el objetivo (y) sea la medida de PM2.5 ---
# Ajusta aquí al nombre REAL de tu columna objetivo en data/pm25_ecuador_clean.csv
# Ejemplos comunes: "pm25_mean_anual", "pm25_max_anual"
# Si no existe, hace fallback a "pm25" si está; y si tampoco, a la última numérica.

import pandas as pd, numpy as np

df = pd.read_csv("data/pm25_ecuador_clean.csv")
num = df.select_dtypes(include=[np.number]).copy()

# --- Elige tu objetivo aquí ---
target_candidates = ["pm25_mean_anual", "pm25_max_anual", "pm25"]
target_name = None
for c in target_candidates:
    if c in num.columns:
        target_name = c
        break
if target_name is None:
    target_name = num.columns[-1]  # fallback

X = num.drop(columns=[target_name]).values
y = num[target_name].values

print(f"Objetivo (y): {target_name}")
print("X shape:", X.shape, "| y shape:", y.shape)
```

## Resumen del flujo aplicado.

Split: train_test_split(..., test_size=0.25, random_state=42)

Modelo (Pipeline): StandardScaler() + LinearRegression()

Métricas: MSE y R² (proporción de varianza explicada).

Gráfico: Real vs Predicho con línea identidad.

Resultados de esta corrida (ejemplo):

MSE bajo y R² alto indican buen ajuste en el agregado anual por estación.
Si no obtienes métricas satisfactorias, revisa el objetivo y las columnas numéricas disponibles.

Interpretación.

En datos anuales por estación, la relación puede ser casi lineal, por eso LinearRegression funciona bien.

Para análisis más finos (intraanuales), agrega variables meteorológicas y de tráfico; prueba modelos no lineales (RandomForest/GBM).


