{
  "hash": "7c8fede6906a59c3ea89e480e6dde647",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Regresión — PM2.5 (Ecuador)\"\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    code-fold: true\n    fig-align: center\n    embed-resources: true\nexecute:\n  echo: true\n  warning: false\n  error: true   # ponlo true mientras probamos; luego puedes volver a false\n---\n\n## Análisis de calidad del aire (PM2.5) en Ecuador con foco en Quito. \n\n## 1) Cargar y explorar\n\n::: {#70b406f8 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Ruta al dataset limpio que generamos antes\ndf = pd.read_csv(\"data/pm25_ecuador_clean.csv\")\n\nprint(\"Shape:\", df.shape)\ndisplay(df.head(8))\n\n# Nos quedamos SOLO con columnas numéricas (la consigna pide evitar categóricas)\nnum = df.select_dtypes(include=[np.number]).copy()\nprint(\"Numéricas:\", list(num.columns))\ndisplay(num.describe().T)\n\n\n## 2) Seleccionar variables (X, y) y train/test split\nfrom sklearn.model_selection import train_test_split\n\n# Elegir la y:\n# Si existe una columna 'pm25', la usamos. Si no existe, tomamos la última columna numérica como fallback.\ntarget_name = \"pm25\" if \"pm25\" in num.columns else num.columns[-1]\n\ny = num[target_name].values\nX = num.drop(columns=[target_name]).values\n\nprint(\"Objetivo (y):\", target_name)\nprint(\"X shape:\", X.shape, \"| y shape:\", y.shape)\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.25, random_state=42\n)\n\n\n## 3) Pipeline + LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\npipe = Pipeline([\n    (\"scaler\", StandardScaler()),  # en regresión lineal no siempre es obligatorio, pero es buena práctica\n    (\"linreg\", LinearRegression())\n])\n\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)\n\n\n## 4) Métricas (MSE y R²)\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nmse = mean_squared_error(y_test, y_pred)\nr2  = r2_score(y_test, y_pred)\n\nprint(f\"MSE : {mse:,.4f}\")\nprint(f\"R²  : {r2:,.4f}\")\n\n\n## 5) Visualización — Real vs Predicho\n\nimport matplotlib.pyplot as plt\n\nplt.figure()\nplt.scatter(y_test, y_pred, alpha=0.4)\nplt.xlabel(\"Real\")\nplt.ylabel(\"Predicho\")\nplt.title(\"PM2.5 — Real vs Predicho\")\nminv = float(np.min([y_test.min(), y_pred.min()]))\nmaxv = float(np.max([y_test.max(), y_pred.max()]))\nplt.plot([minv, maxv], [minv, maxv])  # línea y=x\nplt.tight_layout()\nplt.show()\n\n\n## 6) Curva de aprendizaje (opcional recomendado)\nfrom sklearn.model_selection import learning_curve\n\ntrain_sizes, train_scores, valid_scores = learning_curve(\n    pipe, X, y, cv=5, scoring=\"r2\", n_jobs=None,\n    train_sizes=np.linspace(0.1, 1.0, 6), shuffle=True, random_state=42\n)\n\ntrain_mean = train_scores.mean(axis=1)\nvalid_mean = valid_scores.mean(axis=1)\n\nplt.figure()\nplt.plot(train_sizes, train_mean, marker=\"o\", label=\"Train R²\")\nplt.plot(train_sizes, valid_mean, marker=\"s\", label=\"Valid R²\")\nplt.xlabel(\"Tamaño de entrenamiento\")\nplt.ylabel(\"R²\")\nplt.title(\"Curva de aprendizaje\")\nplt.legend()\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShape: (30983, 14)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anio_report</th>\n      <th>anio</th>\n      <th>codmes</th>\n      <th>mes</th>\n      <th>dia</th>\n      <th>cod_prov</th>\n      <th>prov</th>\n      <th>cod_cant</th>\n      <th>cant</th>\n      <th>cod_tipo</th>\n      <th>tipo</th>\n      <th>cod_est</th>\n      <th>estacion</th>\n      <th>pm2.5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>1</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>37,45</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>2</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>29,52</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>3</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>23,77</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>5</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>19,71</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>6</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>21,24</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>7</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>20,83</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>8</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>17,43</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2021</td>\n      <td>2005</td>\n      <td>1</td>\n      <td>Enero</td>\n      <td>9</td>\n      <td>17</td>\n      <td>Pichincha</td>\n      <td>1701</td>\n      <td>Distrito Metropolitano de Quito</td>\n      <td>1</td>\n      <td>Automática</td>\n      <td>3</td>\n      <td>Belisario</td>\n      <td>17,65</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNuméricas: ['anio_report', 'anio', 'codmes', 'dia', 'cod_prov', 'cod_cant', 'cod_tipo', 'cod_est']\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>anio_report</th>\n      <td>30983.0</td>\n      <td>2021.000000</td>\n      <td>0.000000</td>\n      <td>2021.0</td>\n      <td>2021.0</td>\n      <td>2021.0</td>\n      <td>2021.0</td>\n      <td>2021.0</td>\n    </tr>\n    <tr>\n      <th>anio</th>\n      <td>30983.0</td>\n      <td>2012.464577</td>\n      <td>4.240917</td>\n      <td>2005.0</td>\n      <td>2009.0</td>\n      <td>2013.0</td>\n      <td>2016.0</td>\n      <td>2018.0</td>\n    </tr>\n    <tr>\n      <th>codmes</th>\n      <td>30983.0</td>\n      <td>6.593777</td>\n      <td>3.435656</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>10.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>dia</th>\n      <td>30983.0</td>\n      <td>15.726495</td>\n      <td>8.806857</td>\n      <td>1.0</td>\n      <td>8.0</td>\n      <td>16.0</td>\n      <td>23.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>cod_prov</th>\n      <td>30983.0</td>\n      <td>15.570571</td>\n      <td>4.563800</td>\n      <td>1.0</td>\n      <td>17.0</td>\n      <td>17.0</td>\n      <td>17.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>cod_cant</th>\n      <td>30983.0</td>\n      <td>1558.057096</td>\n      <td>456.379990</td>\n      <td>101.0</td>\n      <td>1701.0</td>\n      <td>1701.0</td>\n      <td>1701.0</td>\n      <td>1701.0</td>\n    </tr>\n    <tr>\n      <th>cod_tipo</th>\n      <td>30983.0</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>cod_est</th>\n      <td>30983.0</td>\n      <td>6.365749</td>\n      <td>8.658158</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>35.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nObjetivo (y): cod_est\nX shape: (30983, 7) | y shape: (30983,)\nMSE : 4.9328\nR²  : 0.9324\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](regresion_pm25_files/figure-html/cell-2-output-6.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regresion_pm25_files/figure-html/cell-2-output-7.png){}\n:::\n:::\n\n\n## Conclusiones — Regresión (PM2.5 Quito)\n\n::: {#63465e9d .cell execution_count=2}\n``` {.python .cell-code}\n# --- Asegurar que el objetivo (y) sea la medida de PM2.5 ---\n# Ajusta aquí al nombre REAL de tu columna objetivo en data/pm25_ecuador_clean.csv\n# Ejemplos comunes: \"pm25_mean_anual\", \"pm25_max_anual\"\n# Si no existe, hace fallback a \"pm25\" si está; y si tampoco, a la última numérica.\n\nimport pandas as pd, numpy as np\n\ndf = pd.read_csv(\"data/pm25_ecuador_clean.csv\")\nnum = df.select_dtypes(include=[np.number]).copy()\n\n# --- Elige tu objetivo aquí ---\ntarget_candidates = [\"pm25_mean_anual\", \"pm25_max_anual\", \"pm25\"]\ntarget_name = None\nfor c in target_candidates:\n    if c in num.columns:\n        target_name = c\n        break\nif target_name is None:\n    target_name = num.columns[-1]  # fallback\n\nX = num.drop(columns=[target_name]).values\ny = num[target_name].values\n\nprint(f\"Objetivo (y): {target_name}\")\nprint(\"X shape:\", X.shape, \"| y shape:\", y.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nObjetivo (y): cod_est\nX shape: (30983, 7) | y shape: (30983,)\n```\n:::\n:::\n\n\n## Resumen del flujo aplicado.\n\nSplit: train_test_split(..., test_size=0.25, random_state=42)\n\nModelo (Pipeline): StandardScaler() + LinearRegression()\n\nMétricas: MSE y R² (proporción de varianza explicada).\n\nGráfico: Real vs Predicho con línea identidad.\n\nResultados de esta corrida (ejemplo):\n\nMSE bajo y R² alto indican buen ajuste en el agregado anual por estación.\nSi no obtienes métricas satisfactorias, revisa el objetivo y las columnas numéricas disponibles.\n\nInterpretación.\n\nEn datos anuales por estación, la relación puede ser casi lineal, por eso LinearRegression funciona bien.\n\nPara análisis más finos (intraanuales), agrega variables meteorológicas y de tráfico; prueba modelos no lineales (RandomForest/GBM).\n\n",
    "supporting": [
      "regresion_pm25_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}