{
  "hash": "474dc6600d40060e5a3281c65f415dec",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Classification — Incidentes\"\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    code-fold: true\n    fig-align: center\n---\n\n# Problemática: detectar si un incidente será un “accidente con heridos” usando solo variables numéricas\n\n::: {#6565c2e2 .cell execution_count=1}\n``` {.python .cell-code}\n# 1. Importar librerías\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import (\n    accuracy_score, precision_score, recall_score, f1_score,\n    ConfusionMatrixDisplay, RocCurveDisplay\n)\n\n# 2. Cargar dataset\ndf = pd.read_csv(\"data/incidentes_clasificacion_ready.csv\")\n\ny = df[\"accidente_con_heridos\"]\nX = df.drop(columns=[\"accidente_con_heridos\"])\n\nprint(\"Dimensiones:\", X.shape)\nprint(\"Distribución de clases:\")\nprint(y.value_counts())\n\n# 3. Dividir en train/test\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)\n\n# 4. Entrenar modelo SIN pipeline\nmodel = LogisticRegression(max_iter=100000, class_weight=\"balanced\")\nmodel.fit(X_train, y_train)\n\n# 5. Predicciones\ny_pred = model.predict(X_test)\ny_proba = model.predict_proba(X_test)[:,1]\n\n# 6. Métricas\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, zero_division=0)\nrecall = recall_score(y_test, y_pred, zero_division=0)\nf1 = f1_score(y_test, y_pred, zero_division=0)\n\nprint(\"\\n==== Resultados SIN Pipeline ====\")\nprint(f\"Accuracy : {accuracy:.4f}\")\nprint(f\"Precision: {precision:.4f}\")\nprint(f\"Recall   : {recall:.4f}\")\nprint(f\"F1 Score : {f1:.4f}\")\n\n# 7. Matriz de confusión\nConfusionMatrixDisplay.from_predictions(y_test, y_pred)\nplt.title(\"Matriz de Confusión — Sin Pipeline\")\nplt.show()\n\n# 8. Curva ROC\nRocCurveDisplay.from_predictions(y_test, y_proba)\nplt.title(\"Curva ROC — Sin Pipeline\")\nplt.grid(True, alpha=0.3)\nplt.show()\n\n# ======== CON PIPELINE ========\n\npipe = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"logreg\", LogisticRegression(max_iter=100000, class_weight=\"balanced\"))\n])\n\npipe.fit(X_train, y_train)\ny_pred_pipe = pipe.predict(X_test)\ny_proba_pipe = pipe.predict_proba(X_test)[:,1]\n\naccuracy = accuracy_score(y_test, y_pred_pipe)\nprecision = precision_score(y_test, y_pred_pipe, zero_division=0)\nrecall = recall_score(y_test, y_pred_pipe, zero_division=0)\nf1 = f1_score(y_test, y_pred_pipe, zero_division=0)\n\nprint(\"\\n==== Resultados CON Pipeline ====\")\nprint(f\"Accuracy : {accuracy:.4f}\")\nprint(f\"Precision: {precision:.4f}\")\nprint(f\"Recall   : {recall:.4f}\")\nprint(f\"F1 Score : {f1:.4f}\")\n\nConfusionMatrixDisplay.from_predictions(y_test, y_pred_pipe)\nplt.title(\"Matriz de Confusión — Con Pipeline\")\nplt.show()\n\nRocCurveDisplay.from_predictions(y_test, y_proba_pipe)\nplt.title(\"Curva ROC — Con Pipeline\")\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDimensiones: (268065, 4)\nDistribución de clases:\naccidente_con_heridos\n0    265740\n1      2325\nName: count, dtype: int64\n\n==== Resultados SIN Pipeline ====\nAccuracy : 0.5142\nPrecision: 0.0107\nRecall   : 0.6022\nF1 Score : 0.0210\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](clasificacion_incidentes_files/figure-html/cell-2-output-2.png){width=521 height=450}\n:::\n\n::: {.cell-output .cell-output-display}\n![](clasificacion_incidentes_files/figure-html/cell-2-output-3.png){width=445 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n==== Resultados CON Pipeline ====\nAccuracy : 0.5142\nPrecision: 0.0107\nRecall   : 0.6022\nF1 Score : 0.0210\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](clasificacion_incidentes_files/figure-html/cell-2-output-5.png){width=521 height=450}\n:::\n\n::: {.cell-output .cell-output-display}\n![](clasificacion_incidentes_files/figure-html/cell-2-output-6.png){width=445 height=449}\n:::\n:::\n\n\n## ## Conclusiones e interpretación\n\n**Resumen del problema.**  \nSe modeló la probabilidad de **accidente con heridos** (clase 1) usando **Regresión Logística**, con un flujo estándar: carga del dataset, división `train_test_split` con `stratify`, entrenamiento **sin** y **con** `Pipeline(StandardScaler + LogisticRegression)`, evaluación con **Accuracy, Precision, Recall, F1** y visualizaciones (**Matriz de confusión** y **Curva ROC**).\n\n**Resultados clave (lo observado en este experimento):**\n- El **accuracy** es poco informativo dado el **fuerte desbalance** (la clase positiva es muy rara).  \n- Se obtuvo **Recall** relativamente alto (capacidad de encontrar positivos) a costa de **Precision** baja (muchos falsos positivos).  \n- **Con** y **sin** Pipeline las métricas son muy similares —esperable en un modelo lineal cuando las variables ya están en rangos similares y el desbalance domina el comportamiento.\n\n",
    "supporting": [
      "clasificacion_incidentes_files"
    ],
    "filters": [],
    "includes": {}
  }
}